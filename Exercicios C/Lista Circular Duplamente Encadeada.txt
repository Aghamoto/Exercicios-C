#include <stdio.h>
#include <stdlib.h>
struct reglistadupla{
       int n;
       struct reglistadupla *ant, *prox;
};
typedef struct reglistadupla no;
no *inicio, *fim, *aux, *atual, *exibir, *pesquisar; 
no *rem, *antes, *depois;

void inserirhead();
void inserirback();
void listar();
void listarcontra();
void consultar();
void remover();

main(){
       int cod;
       aux=NULL;
       inicio=NULL;
       fim=NULL;
       do{
         printf("Digite a opcao:\n"); 
         printf("1.Inserir Na Frente\n");
         printf("2.Inserir Atras\n");
         printf("3.Listar\n");
         printf("4.Listarcontra\n");
         printf("5.Consultar\n");
         printf("6.Remover\n");
         printf("7.Sair\n");
         scanf("%i",&cod);
         switch(cod){
            case 1: inserirhead(); break;
            case 2: inserirback(); break;
            case 3: listar(); break;
            case 4: listarcontra(); break;
            case 5: consultar();break;
            case 6: remover(); break;
            case 7: printf("Finalizando"); break;
            default: printf("Opcao invalida");
         } 
       }while(cod!=7);
}        

void inserirhead(){
     atual=(no*)malloc(sizeof(no));
     printf("\nDigite o numero:\n");
     scanf("%i", &atual->n);
        if(inicio==NULL){
        inicio = atual;
        fim=atual;
     }else{
        atual->prox = inicio;
        inicio->ant = atual;
        inicio = atual;
        
        //parte circular
        
        inicio->ant = fim;
        fim->prox = inicio;	
     }
}

void inserirback(){
     atual=(no*)malloc(sizeof(no));
     printf("\nDigite o numero:\n");
     scanf("%i", &atual->n);
      
     if(inicio==NULL){
        inicio = atual;
        fim=atual;
     }else{
        fim->prox = atual;
        atual->ant = fim;
        fim = atual;
        
        //parte circular
        
        inicio->ant = fim;
        fim->prox = inicio;	
     }
}

void listar(){
     if(inicio==NULL){
       printf("Lista vazia");
     }
     else{
     	exibir=inicio;
     	do{
     		printf("%i \n", exibir->n);
     		exibir=exibir->prox;
		 }while(exibir != inicio);
     	     	  	        
        } 
     } 


/*exibir=inicio;
        while(exibir!=NULL){
            printf(" %i  \n",exibir->n); 
            exibir=exibir->prox;*/

void listarcontra(){
    if(inicio==NULL){
       printf("Lista vazia");
     }
     else{
     	exibir=fim;
     	do{
     		printf("%i \n", exibir->n);
     		exibir=exibir->ant;
		 }while(exibir != fim);
     	     	  	        
        } 
     }   
void consultar(){
     int np;
     printf("Digite o numero procurado:");
     scanf("%i",&np);
     if(inicio==NULL){
       printf("\nLista vazia");
       }
     else{
       pesquisar=inicio;
       while(pesquisar!=NULL){
            if(np==pesquisar->n){
               printf("\n %i encontrado\n",np);
               break;
            }else{
                pesquisar = pesquisar->prox;
            } 
       } 
       if(pesquisar==NULL){
          printf("\nNumero nÃ£o encontrado\n");
       }
     }  
}   


void remover(){
     int np;
     printf("\nDigite o numero procurado:\n");
     scanf("%i",&np);  
     if(inicio==NULL){
       printf("\nLista vazia\n");
     }else{
        antes=depois=NULL;
        rem=inicio;
        while(rem!=NULL){
             if(rem->n==np){
             break;
             }
             antes=rem;
             rem=rem->prox;
        } 
        if(rem==NULL){
           printf("\nNumero nao encontrado\n");
        }
        else{
           if(rem==inicio){
             inicio=inicio->prox;
             inicio->ant=NULL;
             rem->prox=NULL;
             free(rem);
             }else{
                   if(rem==atual){
                      atual=atual->ant;
                      atual->prox=NULL;
                      aux=atual;
                      rem->ant=NULL;
                      free(rem);
                      }else{
                      depois=rem->prox;
                      antes->prox=depois;
                      depois->ant=antes;
                      rem->prox=NULL;
                      rem->ant=NULL;
                      free(rem);
				}
			}
		}
	}   
}  
